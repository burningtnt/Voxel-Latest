import java.util.function.BiFunction

plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		url "https://cursemaven.com"
	}
	maven {
		url 'https://www.jitpack.io'
	}
}

task buildVoxelLib {
	dependsOn compileJava
	dependsOn processResources
	dependsOn classes
	dependsOn jar

	BiFunction<File, File, Void> copyTo = (File rawFile, File targetFile) -> {
		if (targetFile.exists()) {
			targetFile.delete()
		}
		try (
				FileInputStream fileInputStream = new FileInputStream(rawFile)
				FileOutputStream fileOutputStream = new FileOutputStream(targetFile)
		) {
			fileInputStream.transferTo(fileOutputStream)
		}
	}
	File releaseVersionFile = new File("../build/libs/${rootProject.archives_base_name}-${rootProject.mod_version}.jar")
	File devVersionFile = new File("../build/libs/${rootProject.archives_base_name}-${rootProject.mod_version}-dev.jar")
	for (File mavenFile: new File("../.gradle/loom-cache/remapped_mods").listFiles()) {
		File versionDir = new File(mavenFile, "${rootProject.maven_group}/${rootProject.archives_base_name}/${rootProject.mod_version}")
		File mavenReleaseVersionFile = new File(versionDir, "${rootProject.archives_base_name}-${rootProject.mod_version}.jar")
		File mavenDevVersionFile = new File(versionDir, "${rootProject.archives_base_name}-${rootProject.mod_version}-dev.jar")

		copyTo(releaseVersionFile, mavenReleaseVersionFile)
		copyTo(devVersionFile, mavenDevVersionFile)
	}
	println ":overwrite Voxel Latest Dependency"
}

remapJar {
	nestedJars.from file("../build/devlibs/${rootProject.archives_base_name}-${rootProject.mod_version}-dev.jar")
}

afterEvaluate {
	compileJava.dependsOn(rootProject.buildVoxelLib)
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}",{
		transitive = false;
	}
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2",{
		transitive = false;
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}",{
		transitive = false;
	}

	// Fabric API. This is technically optional, but you probably want it anyway.
	// modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
