import net.fabricmc.loom.LoomGradleExtension
import org.gradle.api.internal.tasks.DefaultTaskInputs

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'checkstyle'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        url "https://cursemaven.com"
    }
    maven {
        url 'https://www.jitpack.io'
    }
}

gradle.projectsEvaluated {
    {
        // Remove broken dependencies

        Set<Task> removeDependencies = new HashSet<>()
        for (subProject in subprojects) {
            removeDependencies.add(subProject.prepareRemapJar)
        }

        ((Set<DefaultTaskInputs>) rootProject.prepareRemapJar.dependsOn.delegate).removeIf(taskInputs -> removeDependencies.contains(taskInputs.task))
    }
}

task generateVoxelMapSource {
    doLast {
        File sourceDir = new File(project.rootDir, "source")
        if (!sourceDir.exists()) {
            sourceDir.mkdir()
        }

        File sourceFile = new File(project.rootDir, "source/source.jar")
        if (!sourceFile.exists()) {
            String url = "https://mediafilez.forgecdn.net/files/3345/206/fabricmod_VoxelMap-1.10.15_for_1.17.0.jar"

            try {
                URL tinyUrl = new URL(url)
                HttpURLConnection request = (HttpURLConnection) tinyUrl.openConnection()
                request.setReadTimeout(10000)
                request.connect()
                try (FileOutputStream fileOutputStream = new FileOutputStream(sourceFile)) {
                    request.getInputStream().transferTo(fileOutputStream)
                }
            } catch (IOException e) {
                RuntimeException r = new RuntimeException(String.format("An Error was thrown while reading data from \"%s\".", url), e)
                r.printStackTrace()
                throw r
            }
        }
    }
}

afterEvaluate {
    {
        File releaseDir = new File(project.rootDir, "release")
        if (!releaseDir.exists()) {
            releaseDir.mkdir()
        }
    }

    ((LoomGradleExtension) rootProject.getExtensions().getByName("loom")).getRunConfigs().store.clear()

    tasks.getByName("downloadAssets").configure {
        dependsOn "generateVoxelMapSource"
    }
}

build {
    dependsOn "checkstyleMain"
}

task buildAll {
    for (Project subProject : subprojects) {
        dependsOn ":${subProject.name}:build"
    }
    dependsOn "build"

    doLast {
        for (Project subProject : subprojects) {
            File sourceFile = new File(subProject.buildDir, "libs/${subProject.archives_base_name}-${subProject.mod_version}.jar")
            File targetFile = new File(project.rootDir, "release/${project.archives_base_name}-${subProject.mod_version}-${subProject.minecraft_version}.jar")

            if (sourceFile.exists()) {
                if (!targetFile.delete()) {
                    throw new SecurityException("Failed to delete file ${targetFile.getAbsolutePath()}.")
                }
                try (
                        FileInputStream fileInputStream = new FileInputStream(sourceFile)
                        FileOutputStream fileOutputStream = new FileOutputStream(targetFile)
                ) {
                    fileInputStream.transferTo(fileOutputStream)
                }
            }
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}", {
        transitive = false
    }
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2", {
        transitive = false
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}", {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
